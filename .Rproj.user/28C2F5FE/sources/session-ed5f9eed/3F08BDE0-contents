#author: Diandra
#try uniform datasets from https://github.com/LewisLabUCSD/Ligand-Receptor-Pairs

library('biomaRt')
mart <- useDataset("hsapiens_gene_ensembl", useMart("ensembl"))
genes <- df$genes
df<-df[,-4]
G_list <- getBM(filters= "ensembl_peptide_id", attributes= c("ensembl_peptide_id","hgnc_symbol"),values=genes,mart= mart)
merge(df,G_list,by.x="gene",by.y="ensembl_peptide_id")


BiocManager::install("EnsDb.Hsapiens.v79")
library(EnsDb.Hsapiens.v79)

# 1. Convert from ensembl.gene to gene.symbol
ensembl.genes <- c("ENSG00000150676", "ENSG00000099308", "ENSG00000142676", "ENSG00000180776", "ENSG00000108848", "ENSG00000277370", "ENSG00000103811", "ENSG00000101473")

geneIDs1 <- ensembldb::select(EnsDb.Hsapiens.v79, keys= ensembl.genes, keytype = "GENEID", columns = c("SYMBOL","GENEID"))

# 2. Convert from gene.symbol to ensembl.gene
#geneSymbols <-  c('DDX26B','CCDC83',  'MAST3', 'RPL11', 'ZDHHC20',  'LUC7L3',  'SNORD49A',  'CTSH', 'ACOT8')
#geneIDs2 <- ensembldb::select(EnsDb.Hsapiens.v79, keys= geneSymbols, keytype = "SYMBOL", columns = c("SYMBOL","GENEID"))


library(gprofiler2)
ensembl.genes <- c("ENSG00000150676", "ENSG00000099308", "ENSG00000142676", "ENSG00000180776", "ENSG00000108848", "ENSG00000277370", "ENSG00000103811", "ENSG00000101473")

gene.symbols <- gconvert(ensembl.genes,organism="hsapiens",target="ENTREZGENE",filter_na = F)$target


#modify funcoup file from ENSG to gene_symbol --> working on it
#Kirouac: from ligand name to ligand symbol: inside () if full name, or outside if already symbol --> done
#Vento: weird --> done
#Jin: split receptors --> no need, those are complexes
#Noël: ligand/receptor 1&2 --> done!
#Dimitrov: take source/target_genesymbol, not source and target (from Omni) --> REMOVED OMNI
#Zheng: convert HMDB_ID for ligand to genename --> no point, those are metabolites
#Omni: convert uniprot ID to genename, also modify column names --> DONE


#convert Omni
#from source target to ligand receptor
# Read the.tsv file
data <- read.delim("/Users/diandra/Downloads/DB/RLPdb/OmniPathPPIs.tsv", header = TRUE, sep = "\t")
# Rename the columns
colnames(data) <- c("ligand", "receptor", "is_directed", "is_stimulation", "is_inhibition", 
                    "consensus_direction", "consensus_stimulation", "consensus_inhibition", "dip_url")
# Write the modified data back to the same file
write.table(data, "/Users/diandra/Downloads/DB/RLPdb/OmniPathPPIs.tsv", sep = "\t", quote = FALSE, row.names = FALSE)

#BiocManager::install("org.Hs.eg.db")
library('org.Hs.eg.db')
#ensembl<-mapIds(org.Mm.eg.db, keys=rownames(df), column=’ENSEMBL’, keytype=’SYMBOL’, multiVals=”first”)
#entrez<-mapIds(org.Mm.eg.db, keys=rownames(df), column=’ENTREZID’, keytype=’SYMBOL’, multiVals=”first”)
#entrez<-mapIds(org.Mm.eg.db, keys=rownames(df), column=’UNIPROT’, keytype=’SYMBOL’, multiVals=”first”)
# Read the .tsv file
data <- read.delim("/Users/diandra/Downloads/DB/RLPdb/OmniPathPPIs.tsv", header = TRUE, sep = "\t")
# Create a copy of the original Uniprot IDs
data$ligand_original <- data$ligand
data$receptor_original <- data$receptor

# Convert Uniprot IDs to gene symbols
data$ligand <- mapIds(org.Hs.eg.db, keys=data$ligand, column="SYMBOL", keytype="UNIPROT", multiVals="first")
data$receptor <- mapIds(org.Hs.eg.db, keys=data$receptor, column="SYMBOL", keytype="UNIPROT", multiVals="first")

# Replace NA values with BIRC5 only when the original Uniprot ID is O15392
data$ligand[is.na(data$ligand) & data$ligand_original == "O15392"] <- "BIRC5"
data$receptor[is.na(data$receptor) & data$receptor_original == "O15392"] <- "BIRC5"
# Replace NA values with MIR17HG only when the original Uniprot ID is Q75NE6
data$ligand[is.na(data$ligand) & data$ligand_original == "Q75NE6"] <- "MIR17HG"
data$receptor[is.na(data$receptor) & data$receptor_original == "Q75NE6"] <- "MIR17HG"
# Replace NA values with TRBV7-9 only when the original Uniprot ID is P04435
data$ligand[is.na(data$ligand) & data$ligand_original == "P04435"] <- "TRBV7-9"
data$receptor[is.na(data$receptor) & data$receptor_original == "P04435"] <- "TRBV7-9"
# Replace NA values with PIK3R2 only when the original Uniprot ID is Q96EV4
data$ligand[is.na(data$ligand) & data$ligand_original == "Q96EV4"] <- "PIK3R2"
data$receptor[is.na(data$receptor) & data$receptor_original == "Q96EV4"] <- "PIK3R2"
# Replace NA values with DKFZp686J04131 only when the original Uniprot ID is Q68D39
data$ligand[is.na(data$ligand) & data$ligand_original == "Q68D39"] <- "DKFZp686J04131"
data$receptor[is.na(data$receptor) & data$receptor_original == "Q68D39"] <- "DKFZp686J04131"
# Replace NA values with MT-RNR2 only when the original Uniprot ID is Q8IVG9
data$ligand[is.na(data$ligand) & data$ligand_original == "Q8IVG9"] <- "MT-RNR2"
data$receptor[is.na(data$receptor) & data$receptor_original == "Q8IVG9"] <- "MT-RNR2"
# Replace NA values with CARD17P only when the original Uniprot ID is Q5XLA6
data$ligand[is.na(data$ligand) & data$ligand_original == "Q5XLA6"] <- "CARD17P"
data$receptor[is.na(data$receptor) & data$receptor_original == "Q5XLA6"] <- "CARD17P"
# Replace NA values with HLA-DMA only when the original Uniprot ID is P28067
data$ligand[is.na(data$ligand) & data$ligand_original == "P28067"] <- "HLA-DMA"
data$receptor[is.na(data$receptor) & data$receptor_original == "P28067"] <- "HLA-DMA"
# Replace NA values with CARD16 only when the original Uniprot ID is Q5EG05
data$ligand[is.na(data$ligand) & data$ligand_original == "Q5EG05"] <- "CARD16"
data$receptor[is.na(data$receptor) & data$receptor_original == "Q5EG05"] <- "CARD16"
# Replace NA values with ATP2B4 only when the original Uniprot ID is P23634
data$ligand[is.na(data$ligand) & data$ligand_original == "P23634"] <- "ATP2B4"
data$receptor[is.na(data$receptor) & data$receptor_original == "P23634"] <- "ATP2B4"
# Replace NA values with CHK2 only when the original Uniprot ID is Q683Z8
data$ligand[is.na(data$ligand) & data$ligand_original == "Q683Z8"] <- "CHK2"
data$receptor[is.na(data$receptor) & data$receptor_original == "Q683Z8"] <- "CHK2"
# Replace NA values with BCR/ABL fusion only when the original Uniprot ID is A9UF07
data$ligand[is.na(data$ligand) & data$ligand_original == "A9UF07"] <- "BCR/ABL fusion"
data$receptor[is.na(data$receptor) & data$receptor_original == "A9UF07"] <- "BCR/ABL fusion"
# Replace NA values with RET/PTC2 fusion only when the original Uniprot ID is Q15300
data$ligand[is.na(data$ligand) & data$ligand_original == "Q15300"] <- "RET/PTC2"
data$receptor[is.na(data$receptor) & data$receptor_original == "Q15300"] <- "RET/PTC2"
# Replace NA values with PDPK2P fusion only when the original Uniprot ID is Q6A1A2
data$ligand[is.na(data$ligand) & data$ligand_original == "Q6A1A2"] <- "PDPK2P"
data$receptor[is.na(data$receptor) & data$receptor_original == "Q6A1A2"] <- "PDPK2P"

# Write the modified data back to the same file
write.table(data, "/Users/diandra/Downloads/DB/RLPdb/OmniPathPPIs_new.tsv", sep = "\t", quote = FALSE, row.names = FALSE)



#modify Noel
# Load necessary libraries
library(readxl)
library(tidyr)
library(dplyr)
library(writexl)

# Load the xlsx file
data <- read_excel("~/Downloads/DB/RLPdb/Human-2020-Noël-LR-pairs.xlsx")
#data <- read_excel("~/Downloads/DB/ICELLNETv2/ICELLNETdb_v2.xlsx"

# Pivot the data to create new rows for each combination of ligand and receptor
data_split <- data %>%
  tidyr::pivot_longer(
    cols = c("Ligand 1", "Ligand 2"),
    names_to = "Ligand_Type",
    values_to = "Ligand"
  ) %>%
  tidyr::pivot_longer(
    cols = c("Receptor 1", "Receptor 2", "Receptor 3"),
    names_to = "Receptor_Type",
    values_to = "Receptor"
  ) %>%
  dplyr::select(-Ligand_Type, -Receptor_Type) %>%
  dplyr::filter(!is.na(Ligand) &!is.na(Receptor))

# Write the modified data to a new Excel file
write_xlsx(data_split, "~/Downloads/DB/RLPdb/Human-2020-Noël-LR-pair_new.xlsx")


#modify Noelv2
# Load necessary libraries
library(readxl)
library(tidyr)
library(dplyr)
library(writexl)

# Load the xlsx file
data <- read_excel("~/Downloads/DB/ICELLNETv2/ICELLNETdb_v2.xlsx")

# Pivot the data to create new rows for each combination of ligand and receptor
data_split <- data %>%
  tidyr::pivot_longer(
    cols = c("Ligand 1", "Ligand 2", "Ligand 3", "Ligand 4"),
    names_to = "Ligand_Type",
    values_to = "Ligand"
  ) %>%
  tidyr::pivot_longer(
    cols = c("Receptor 1", "Receptor 2", "Receptor 3", "Receptor 4", "Receptor 5"),
    names_to = "Receptor_Type",
    values_to = "Receptor"
  ) %>%
  dplyr::select(-Ligand_Type, -Receptor_Type) %>%
  dplyr::filter(!is.na(Ligand) &!is.na(Receptor))

# Write the modified data to a new Excel file
write_xlsx(data_split, "~/Downloads/DB/ICELLNETv2/ICELLNETdb_v2_new.xlsx")




#modify Kirouac
# Load the readxl package to read xlsx files
library(readxl)
# Load the dplyr package for data manipulation
library(dplyr)
library(writexl)

# Read the xlsx file
df <- read_excel("~/Downloads/DB/RLPdb/Human-2010-Kirouac-LR-pairs.xlsx")

# Define a function to refine the data
refine_data <- function(x) {
  if (grepl("\\(", x)) {
    if (grepl("^(CCL|CX)", x)) {
      return(gsub("\\s*\\(.*\\)", "", x))
    } else {
      outside <- gsub("\\(.*\\)", "", x)
      inside <- gsub(".*\\((.*)\\).*", "\\1", x)
      outside <- gsub("^\\s+|\\s+$", "", outside)  # remove leading and trailing spaces
      inside <- gsub("^\\s+|\\s+$", "", inside)  # remove leading and trailing spaces
      if (grepl("/", inside)) {
        return(inside)
      } else {
        if (nchar(inside) > 0) {
          outside_capitals <- sum(gregexpr("[A-Z]", outside)[[1]]>0)
          inside_capitals <- sum(gregexpr("[A-Z]", inside)[[1]]>0)
          if (abs(outside_capitals - inside_capitals) <= 2) {
            if (nchar(outside) > nchar(inside)) {
              return(inside)
            } else {
              return(outside)
            }
          } else {
            if (inside_capitals >= outside_capitals) {
              return(inside)
            } else {
              return(outside)
            }
          }
        } else {
          return(outside)
        }
      }
    }
  } else {
    return(x)
  }
}
# Vectorize the function
refine_data <- Vectorize(refine_data)

# Apply the function to each cell in the dataframe
df <- df %>% mutate(across(everything(), refine_data))
# Save the refined dataframe to a new xlsx file
write_xlsx(df, "~/Downloads/DB/RLPdb/Human-2010-Kirouac-LR-pairs_new.xlsx")

#modify the new file
df <- read_excel("~/Downloads/DB/RLPdb/Human-2010-Kirouac-LR-pairs_new.xlsx")
# Define the extract_ligand function
extract_ligand <- function(x) {
  if (grepl("/", x)) {
    ligands <- strsplit(x, "/")[[1]]
    counts <- sapply(ligands, function(y) sum(grepl("[A-Z0-9]", strsplit(y, "")[[1]])))
    
    # If there's a tie, keep the first one
    max_count <- max(counts)
    if (sum(counts == max_count) > 1) {
      return(ligands[1])
    } else {
      return(ligands[which.max(counts)])
    }
  } else {
    return(x)  # Return the original string if no / is present
  }
}


# Apply the extract_ligand function to the Ligand column
df$LIGAND <- sapply(as.character(df$LIGAND), extract_ligand)

# Write the updated data back to the xlsx file
write_xlsx(df, "~/Downloads/DB/RLPdb/Human-2010-Kirouac-LR-pairs_new.xlsx")






#modify Vento
# Read the .csv file
#data <- read.csv("~/Downloads/DB/RLPdb/Human-2018-Vento-Tormo-LR-pairs.csv", stringsAsFactors = FALSE)
data <- read.csv("~/Downloads/DB/Cellphonedbv5/interaction_input_Vento_Cellphonedbv5.csv", stringsAsFactors = FALSE)

# Create the ligand column
data$ligand <- ifelse(is.na(data$protein_name_a) | data$protein_name_a == "", 
                      data$partner_a, 
                      sub("_.*", "", data$protein_name_a))

# Create the receptor column
data$receptor <- ifelse(is.na(data$protein_name_b) | data$protein_name_b == "", 
                        data$partner_b, 
                        sub("_.*", "", data$protein_name_b))

# Check for swapped values and swap them if necessary
swapped_rows <- grepl("receptor", data$ligand, ignore.case = TRUE) | grepl("ligand", data$receptor, ignore.case = TRUE)
swapped_rows[is.na(swapped_rows)] <- FALSE  # Replace NA with FALSE
if (any(swapped_rows)) {
  cat("Swapped values found. Swapping...\n")
}
data[swapped_rows, c("ligand", "receptor")] <- data[swapped_rows, c("receptor", "ligand")]

# Write the updated data to a new .csv file
#write.csv(data, "~/Downloads/DB/RLPdb/Human-2018-Vento-Tormo-LR-pairs_new.csv", row.names = FALSE)
write.csv(data, "~/Downloads/DB/Cellphonedbv5/interaction_input_Vento_Cellphonedbv5_new.csv", row.names = FALSE)




#check vento again
# Load the necessary libraries
library(org.Hs.eg.db)
library(readr)

# Load your data
data <- read.csv("~/Downloads/DB/LewisLabUCSD/Human-2018-Vento-Tormo-LR-pairs.csv", stringsAsFactors = FALSE)

#Extract the Uniprot ID part from the string
data$partner_a_uniprot <- sub("_HUMAN", "", data$protein_name_a)
data$partner_b_uniprot <- sub("_HUMAN", "", data$protein_name_b)

# Convert Uniprot IDs to gene symbols using the uniprot package
ids <- unique(c(data$partner_a_uniprot, data$partner_b_uniprot))
conv <- id_mapping(ids, from = "UNIPROTKB", to = "GENENAME")

# Merge the converted IDs back into the data
data <- merge(data, conv, by.x = c("partner_a_uniprot", "partner_b_uniprot"), by.y = c("from", "from"))

# Rename the columns
data <- data %>% 
  rename(partner_a_symbol = to, partner_b_symbol = to)

# Save the updated data to the same file
write.csv(data, "~/Downloads/DB/LewisLabUCSD/Human-2018-Vento-Tormo-LR-pairs_new.csv", row.names = FALSE)



